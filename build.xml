<project name="YajHFC" default="dist" basedir=".">
	<description>
        YajHFC build file
    </description>
	<!-- set global properties for this build -->
	<property name="src" location="."/>
	<property name="jar-extra" location="jar"/>
	<property name="build.compiler" value="modern"/>

	<property file="build.properties"/>
	<property name="gnu.hylafax-dir" location="../gnu-hylafax"/>
	<property name="build" location="build"/>
	<property name="jar-output" location="${build}/yajhfc.jar"/>
	<property name="srczip-output" location="${build}/yajhfc-src.zip"/>

	<fileset dir="${gnu.hylafax-dir}" id="fs.gnu.hylafax-jar-core">
		<filename name="lib/gnu-hylafax-core-*.jar"/>
	</fileset>
	<fileset dir="${gnu.hylafax-dir}" id="fs.gnu.hylafax-jar-inet-ftp">
		<filename name="lib/gnu-hylafax-inet-ftp-*.jar"/>
	</fileset>
	<property name="gnu.hylafax-jar-core" refid="fs.gnu.hylafax-jar-core"/>
	<property name="gnu.hylafax-jar-inet-ftp" refid="fs.gnu.hylafax-jar-inet-ftp"/>

	<target name="init">
		<available file="${gnu.hylafax-dir}/gnu/hylafax/HylaFAXClient.class" property="gnu.hylafax.haveClassDir"/>
		<condition property="gnu.hylafax.haveJars">
			<and>
				<isfalse   value="${gnu.hylafax.haveClassDir}"/>
				<available file="${gnu.hylafax-dir}/${gnu.hylafax-jar-core}"/>
				<available file="${gnu.hylafax-dir}/${gnu.hylafax-jar-inet-ftp}"/>
			</and>
		</condition>

	
		<fail message="gnu.hylafax library not found in path ${gnu.hylafax-dir}. Use -Dgnu.hylafax-dir=$$dirname to specify the correct path.">
			<condition>
				<not>
					<or>
						<istrue value="${gnu.hylafax.haveClassDir}"/>
						<istrue value="${gnu.hylafax.haveJars}"/>
					</or>
				</not>
			</condition>
		</fail>

		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		
		<!-- Find out if we have valid, precompiled translations -->
		<uptodate property="i18n.havePrecompiled">
			<srcfiles dir="${src}/yajhfc/i18n/" includes="*_*.po"/>
			<compositemapper>
				<mapper type="glob" from="m*.po" to="M*.class" />
				<mapper type="glob" from="m*.po" to="M*$1.class" />
			</compositemapper>
		</uptodate>

		<condition property="gnu.hylafax.classFileLocation" value="${gnu.hylafax-dir}" else="${build}/gnu.hylafax">
			<istrue value="${gnu.hylafax.haveClassDir}"/>
		</condition>
		<antcall target="init.unjar-gnuhylafax"/>
	</target>
	<target name="init.unjar-gnuhylafax" if="gnu.hylafax.haveJars">
		<mkdir dir="${gnu.hylafax.classFileLocation}"/>
		<unjar src="${gnu.hylafax-dir}/${gnu.hylafax-jar-core}" dest="${gnu.hylafax.classFileLocation}">
			<patternset>
				<include name="**/*.class"/>
			</patternset>
		</unjar>
		<unjar src="${gnu.hylafax-dir}/${gnu.hylafax-jar-inet-ftp}" dest="${gnu.hylafax.classFileLocation}">
			<patternset>
				<include name="**/*.class"/>
			</patternset>
		</unjar>
	</target>


	<target name="compile" depends="init" description="compile the source code" >
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" includes="yajhfc/**/*.java" destdir="${build}" source="1.5" target="1.5" debug="true" debuglevel="lines,source">
			<classpath>
				<pathelement path="${classpath}"/>
				<pathelement location="${gnu.hylafax.classFileLocation}"/>
				<pathelement location="${jar-extra}"/>
			</classpath>
		</javac>

	</target>

	<!--
	<target name="i18n" depends="init" description="Compiles and/or copies the translations">
		<antcall target="i18n.msgfmt"/>
		<antcall target="i18n.copy"/>
	</target>

	<target name="i18n.copy">
		<mkdir dir="${build}/yajhfc/i18n"/>
		<copy todir="${build}/yajhfc/i18n">
			<fileset dir="${src}/yajhfc/i18n/" includes="*.class"/>
		</copy>
	</target>
	-->

	<target name="i18n" unless="i18n.havePrecompiled" depends="init" description="compile the translations">
		<exec executable="/bin/sh" dir="${src}/yajhfc/i18n/" osfamily="unix">
			<arg value="./fmtall.sh"/>
		</exec>
	</target>

	<target name="dist" depends="compile,i18n,doc" description="generate the distribution" >
		<jar jarfile="${jar-output}" manifest="${jar-extra}/manifest.txt">
			<fileset dir="${build}" includes="yajhfc/**"/>
			<fileset dir="${src}" includes="yajhfc/i18n/*.class"/>
			<fileset dir="${jar-extra}" includes="info/**/*.class,toolbarButtonGraphics/**/*.gif"/>
			<fileset dir="${gnu.hylafax.classFileLocation}" includes="**/*.class"/>
			<fileset dir="${src}" includes="COPYING,README*.txt,yajhfc/*.png,doc/*.html,doc/*.css,yajhfc/faxcover/*.ps"/>
		</jar>
	</target>

	<target name="sourcedist" depends="init,i18n,doc" description="generate the source distribution" >
		<zip destfile="${srczip-output}">
			<zipfileset dir="${src}" prefix="yajhfc/">
				<exclude name="yajhfc/**/*.class"/>
				<exclude name="build/"/>
				<exclude name="**/*.jar"/>
				<exclude name="doc/faq-src/*"/>
				<exclude name="**/*.log"/>
			</zipfileset>
			<zipfileset dir="${src}" prefix="yajhfc/">
				<include name="doc/faq-src/.latex2html-init"/>
				<include name="doc/faq-src/*.tex"/>
				<include name="doc/faq-src/*.sh"/>
				<include name="yajhfc/i18n/*.class"/>
			</zipfileset>
		</zip>
	</target>

	<target name="doc" depends="init" description="generate the documentation">
		<!-- Find out if we have valid, precompiled docs -->
		<uptodate property="doc.faq.havePrecompiled">
			<srcfiles dir="${src}/doc/" includes="faq-src/*.tex"/>
			<compositemapper>
				<mapper type="glob" from="faq-src/*.tex" to="*.pdf" />
				<mapper type="glob" from="faq-src/*.tex" to="*.html" />
			</compositemapper>
		</uptodate>
		<antcall target="doc.faq"/>
	</target>

	<target name="doc.faq" unless="doc.faq.havePrecompiled">
		<exec executable="/bin/sh" dir="${src}/doc/faq-src/" osfamily="unix">
			<arg value="./buildfaq.sh"/>
		</exec>
	</target>

	<target name="fulldist" depends="dist,sourcedist" description="generate both source and binary distributions"/>

	<target name="clean" description="clean up" >
		<!-- Delete the ${build} directory tree and the jar file -->
		<delete dir="${build}"/>
		<delete file="${jar-output}"/>
	</target>
</project>
